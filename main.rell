entity player {
    key name;
    key pubkey;
}

struct cells {cells: list<integer>;}
entity table {
    key name: text;
    mutable whose_turn: player;
    mutable cells: byte_array;
    mutable state: integer;
}

entity player_at_table {
    key table, player; // one player can only play in one table
    key table, sign: integer;
}

operation create_player(name, pubkey) {
    require(is_signer(pubkey));
    create player(name, pubkey);
}

operation new_table(table_name: text, player_name: text) {
    val player1 = player@{player_name};
    require(is_signer(player1.pubkey));
    create table(.name = table_name, player1, .cells = cells([0, 0, 0, 0, 0, 0, 0, 0, 0]).to_bytes(), 0);
    create player_at_table(table@{table_name}, player1, 1);
}

operation add_player(player_name: text, table_name: text) {
    val table = table@{table_name};
    require(table.state == 0);
    val player2 = player@{player_name};
    require(is_signer(player2.pubkey));
    create player_at_table(table, player2, 2);
    table.state += 1;
}

operation move(player_name: text, table_name: text, cell: integer) {
    val table = table@{table_name};
    require(table.state == 1, "Not the right time to call this operation!");
    val pat = player_at_table@{.player.name == player_name, table@{table_name}}; // pat == player_at_table
    val player = pat.player;
    require(is_signer(player.pubkey), "You are not the signer!");
    require(table.whose_turn == player, "It is not your turn!");
    val cell_list = cells.from_bytes(table.cells).cells;
    require(cell_list[cell] == 0, "This cell is already taken!");
    cell_list[cell] = pat.sign;

    table.cells = cells(cell_list).to_bytes();

    print(cell_list);

    if(is_win(cell_list) != 0) {
        table.state = 3;
    } else if (is_board_populated(cell_list)) {
        table.state = 2;
    } else {
        val players = player_at_table@*{table};
        table.whose_turn = if(table.whose_turn == players[0].player) players[1].player else players[0].player;
    }
}

function is_board_populated(cells: list<integer>): boolean {
    for (cell in cells) {
        if (cell == 0) {
            return false;
        }
    }

    return true;
}

function is_win(cells: list<integer>): integer {
    // check line
    for (i in range(3)) {
        val line = cells.sub(i*3, (3*i)+3);
        if (line[0] != 0 and line[0] == line[1] and line[1] == line[2]) {
            // somebody won
            return line[0];
        }
    }

    // check vertical
    for(i in range(3)){
        val line = [cells[i], cells[i+3], cells[i+6]];
        if(line[0] != 0 and line[0] == line[1] and line[1] == line[2]) {
            // somebody won
            return line[0];
        }
    }

    // check diagonal
    val line = [cells[0], cells[4], cells[8]];
    val line2 = [cells[2], cells[4], cells[6]];
    if((line[0]!=0 and line[0] == line[1] and line[1] == line[2]) or (line2[0] != 0 and line2[0] == line2[1] and line2[1]==line2[2])) {
        // somebody won
        return line[1];
    }
    return 0;
}

query getPlayer (pubkey, name) = player@?{ name, pubkey};

query getOpenTables(pubkey) {
    return table@*{.state == 0, .whose_turn.pubkey != pubkey}(@sort_desc name = .name, whose_turn = .whose_turn.name);
}

query getPlayerTables (pubkey) {
    return player_at_table@*{player@{pubkey}}(@sort_desc name = .table.name, state = .table.state, whose_turn = .table.whose_turn.name, sign = .sign);
}

query getSign(pubkey, table_name: text) = player_at_table@{player@{pubkey}, table@{table_name}}.sign;

query getBoard(table_name: text) {
    return cells.from_bytes(table@{.name == table_name}.cells).cells;
}

query getGame(name: text) {
    var players = player_at_table@*{table@{name}}(name = .player.name, sign = .sign);

    var table = table@?{name}(
        .name,
        .state,
        .cells,
        whose_turn = .whose_turn.name
    );

    if (table == null) {
        return null;
    }

    return (
        name = table.name,
        state = table.state,
        whose_turn = table.whose_turn,
        players = players,
        board = cells.from_bytes(table.cells).cells
    );
}
